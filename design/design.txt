The problem I am solving with my term project is how to create a tower defense game. I have solved this with creating my own version of tower defense. In doing this, I used object-oriented programming to handle different features of the game. 

First, I created a map class to keep track of the path that enemies will walk on, the towers on the map, and drawing these features with drawMap(). Another feature associated with map is the map builder. For map building I have created a custom draw function, draw(), where it takes in an empty map and modify the map--a 2D list--according to the user.

To generate and handle enemies, I created an enemy class. This class manages each enemy on the map, directing them where to walk with move() and update(). Each enemy is then added to a sprite group in my main function. This class is a subclass of pygame's sprite class, so that I could not only handle the data of each enemy but also modify its image information and draw them on map simply with the enemy's sprite group.draw. 

Another important component of the game is the towers, and I have created an object class for them. The class keeps track of each tower's level, radius of attack, cost, etc. I have also made subclasses of the Tower class to work with different types of towers. The differences among towers include radius, image file, upgradeCost, and the kind of bullets they fire. With different subclasses I could easily pass the info to tower.launchAttack(), which generates the bullets.

For the bullets I created a subclass of pygame's sprite class just like enemies. This is the towerAttack class. Each instance of this is a bullet. This class tracks the position of the bullet and where to fire. The most important function in this class is update(), where, using top down design, calls subsequent methods based on the tower type the bullet is coming from in order to update position of bullet.  

The last important game play feature is the player, which I worked with using an object class. This class keeps track of player's level, difficulty mode, high score, money, and number of enemies. The most important method of player is restart(), which allows the user to restart game with original settings for player. findHighScore(),addHighScore(),and setHighScore() deals with extracting and adding information in tempDir folder and file in order to keep track and update high score information.

In terms of user interface, I made it as aesthetically appealing as possible. Based on what I observed from other tower defense games in my competitive analysis, most have mundane colors and unattractive images, boring typography that makes one not enjoy the game experience as much as possible.(i.e. Basic Tower Defense,Wesnoth Tower Defense). The interface is also all accessible with mouse, because keyboard controlled events are not as intuitive. For the game play, I chose to have a dynamic menu showing tower info whenever a tower on map is hovered over because it is informative to users, as Wesnoth Tower Defense had a similar feature and I found it very useful. 